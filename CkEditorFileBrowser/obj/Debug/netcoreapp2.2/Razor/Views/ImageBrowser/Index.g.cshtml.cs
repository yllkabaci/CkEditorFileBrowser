#pragma checksum "C:\Users\Yllka\source\repos\CkEditorFileBrowser\CkEditorFileBrowser\Views\ImageBrowser\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "394767fc8c8a25f332bdab5852a93e9b38cd1818"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ImageBrowser_Index), @"mvc.1.0.view", @"/Views/ImageBrowser/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/ImageBrowser/Index.cshtml", typeof(AspNetCore.Views_ImageBrowser_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\Yllka\source\repos\CkEditorFileBrowser\CkEditorFileBrowser\Views\_ViewImports.cshtml"
using CkEditorFileBrowser;

#line default
#line hidden
#line 2 "C:\Users\Yllka\source\repos\CkEditorFileBrowser\CkEditorFileBrowser\Views\_ViewImports.cshtml"
using CkEditorFileBrowser.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"394767fc8c8a25f332bdab5852a93e9b38cd1818", @"/Views/ImageBrowser/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4b02d48cf6ec73710d3354bc78b97f2c79645408", @"/Views/_ViewImports.cshtml")]
    public class Views_ImageBrowser_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "C:\Users\Yllka\source\repos\CkEditorFileBrowser\CkEditorFileBrowser\Views\ImageBrowser\Index.cshtml"
  
	ViewData["Title"] = "Index";

#line default
#line hidden
#line 5 "C:\Users\Yllka\source\repos\CkEditorFileBrowser\CkEditorFileBrowser\Views\ImageBrowser\Index.cshtml"
  
	Layout = "";

#line default
#line hidden
            BeginContext(62, 37, true);
            WriteLiteral("\r\n<!doctype html>\r\n<html lang=\"en\">\r\n");
            EndContext();
            BeginContext(99, 2465, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "394767fc8c8a25f332bdab5852a93e9b38cd18183913", async() => {
                BeginContext(105, 2452, true);
                WriteLiteral(@"
	<meta charset=""utf-8"" />
	<title>CKeditor Image Browser</title>
	<meta name=""description"" content=""CKeditor Image Browser, from http://coursesweb.net/ , Free"" />
	<meta name=""keywords"" content=""ckeditor, image browse"" />
	<meta name=""robots"" content=""ALL"" />
	<meta name=""author"" content=""MarPlo"" />
	<style>

		body, html {
			background-color: #f7f7f7;
			font-family: arial;
			font-size: 12px;
			margin: 0;
			padding: 0;
			text-align: center;
		}

		footer, section, nav {
			display: block
		}

		#menu {
			background-color: #2a3542;
			float: left;
			height: 100vh;
			margin: 0;
			padding: 5px 0 0;
			text-align: left;
			width: 15%;
		}

			#menu ul {
				list-style: outside none none;
				margin: 1px 0 1px 0.1em;
				padding: 0 0 0 0.5em;
			}

			#menu li {
				color: #fff;
				margin: 1px 0;
				padding: 8px 2px;
			}

				#menu li span {
					background: url(""img/folder.png"") no-repeat scroll left top transparent;
					color: #aeb2b7;
					cursor: po");
                WriteLiteral(@"inter;
					display: block;
					height: 22px;
					line-height: 25px;
					padding-left: 30px;
				}

			#menu #c_li #c_span {
				background: url(""img/folder-open.png"") no-repeat scroll left top transparent;
				color: #ff6c60;
				font-weight: 700;
				text-decoration: none;
			}

			#menu li span:hover {
				color: #ff6c60;
				text-decoration: none;
			}

		#imgs {
			background: none repeat scroll 0 0 #f7f7f7;
			height: 100%;
			margin: 0 0 1em calc(10.1em + 0.2%);
			overflow: auto;
			padding: 0.2em 0.3em;
			position: relative;
			text-align: left;
		}

			#imgs h1 {
				margin: 25% auto 1em auto;
				text-align: center;
				font-size: 18px;
				color: #DDDDDD;
			}

			#imgs span {
				background: none repeat scroll 0 0 #fefeff;
				border: 1px solid #ddd;
				color: #666;
				display: inline-block;
				font-size: 10px;
				font-weight: 600;
				margin: 0.2em 0.3%;
				max-height: 10em;
				padding: 2px;
				text-align: center;
			}

				#imgs span:h");
                WriteLiteral(@"over {
					background: #ebfbeb;
				}

					#imgs span:hover img {
						background: #fefebe;
					}

			#imgs img {
				border: medium none;
				cursor: pointer;
				display: block;
				height: 80px;
				margin: 0 auto 2px;
				padding: 2px;
			}

		#footer {
			position: absolute;
			bottom: 0;
			left: 0;
			right: 0;
			margin: 1px auto;
			font-size: 8px;
		}
	</style>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(2564, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(2566, 4757, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "394767fc8c8a25f332bdab5852a93e9b38cd18187643", async() => {
                BeginContext(2572, 4744, true);
                WriteLiteral(@"
	<nav id=""menu"">
		<ul>
			<li id=""c_li""><span id=""c_span"" title="""">Uploads</span></li>
		</ul>
	</nav>
	<section id=""imgs""></section>
	<footer id=""footer""></footer>
	<script>
// <![CDATA[
    var current_li = 'c_li'; // id of current accessed li-menu
    var current_span = 'c_span'; // id of current accessed span in li-menu
    var title_dir = document.getElementById(current_li).querySelector('span').title; // title with dir-path of current span-li
    var li_name = document.getElementById(current_li).querySelector('span').innerHTML; // name of current accessed menu-list
    var imgs = document.getElementById('imgs'); // element with images

    // To get value of imgroot and CKEditorFuncNum from URL
    var url = location.href; // current page address
    var imgroot = url.match(/imgroot=([^&]*)/) ? url.match(/imgroot=([^&]*)/)[1] : null;
    var CKEditorFuncNum = url.match(/CKEditorFuncNum=([0-9]+)/) ? url.match(/CKEditorFuncNum=([0-9]+)/)[1] : null;

    // Ajax, receives the url of ");
                WriteLiteral(@"file to access, data to send, and a callback function (called when the response is received)
    function ajaxSend(datasend, callback) {
        imgs.innerHTML = '<h1>Loading ...</h1>'; // message till ajax-response

        var request = (window.XMLHttpRequest) ? new XMLHttpRequest() : new ActiveXObject(""Microsoft.XMLHTTP""); // sets the XMLHttpRequest instance
        datasend += '&isajax=1'; // to know in php it is ajax request
        if (imgroot != null) datasend += '&imgroot=' + imgroot;

		request.open(""POST"", 'ImageBrowser/GetImages'); // define the request

        // adds  a header to tell the PHP script to recognize the data as is sent via POST, and send data
        request.setRequestHeader(""Content-type"", ""application/x-www-form-urlencoded"");
        request.send(datasend);

        // Check request status,  when the response is completely received pass it to callback function
        request.onreadystatechange = function() {
            if (request.readyState == 4) {
            ");
                WriteLiteral(@"    callback(request.responseText);
            }
        }
    }

    // callback from Ajax
    function ajaxCallback(response) {
        var content = JSON.parse(response);

        if (response.match(/ERROR from PHP:/)) imgs.innerHTML = '<h2>' + content + '</h2>';
        else {
            // add new menu in current clicked list
            if (document.getElementById(current_li)) document.getElementById(current_li).innerHTML = '<span title=""' + title_dir + '"" id=""' + current_span + '"">' + li_name + '</span>' + content.menu;
            imgs.innerHTML = content.imgs;
            regEv();
        }
    }

    // to register events
    function regEv() {
        if (document.getElementById('menu')) {
            // get menu LIs
            var lists = document.getElementById('menu').querySelectorAll('li span');
            var nr_lists = lists.length;

            // register click to eack span-li
            if (nr_lists > 0) {
                for (var i = 0; i < nr_lists; i++) {");
                WriteLiteral(@"
                    lists[i].addEventListener('click', function(e) {
                        if (e.target.id == current_span) return false;
                        else {
                            // removes and sets id for current element
                            if (document.getElementById(current_li)) document.getElementById(current_li).removeAttribute('id');
                            if (document.getElementById(current_span)) document.getElementById(current_span).removeAttribute('id');
                            e.target.parentNode.setAttribute('id', current_li);
                            li_name = e.target.childNodes[0].nodeValue;
                            title_dir = e.target.title;

                            ajaxSend('imgdr=' + title_dir, ajaxCallback); // get data from php
                        }
                    }, false);
                }
            }

            // get images and register click to eack img, to acces window.parent.CKEDITOR.tools.callFunction()");
                WriteLiteral(@"
            var img_all = imgs.querySelectorAll('img');
            var nr_img_all = img_all.length;

            // register click to eack span-li
            if (nr_img_all > 0) {
                for (var i = 0; i < nr_img_all; i++) {
                    img_all[i].addEventListener('click', function(e) {
                        if (CKEditorFuncNum !== null) window.opener.CKEDITOR.tools.callFunction(CKEditorFuncNum, e.target.src);
                        window.close();
                    }, false);
                }
            }
        }
    }

    ajaxSend('', ajaxCallback); // get data from php
    // ]]></script>
");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(7323, 11, true);
            WriteLiteral("\r\n</html>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
